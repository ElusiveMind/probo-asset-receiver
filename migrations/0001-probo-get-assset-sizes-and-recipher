#! /usr/bin/env node
'use strict';

var Loader = require('yaml-config-loader');
var yargs = require('yargs');
var path = require('path');
var bunyan = require('bunyan');
var through2 = require('through2');
var zlib = require('zlib');
var crypto = require('crypto');
var fs = require('fs');

var plugins = require('../lib/plugins');
var ByteCounter = require('../lib/ByteCounter');

var loader = new Loader({stopOnError: false});
var logger = bunyan.createLogger({name: 'probo-asset-fixer'});

var cliargs = yargs
  .describe('config', 'A path to a one or more configuration files or directories.')
  .alias('config', 'c')
  .describe('reciphered-output-dir', 'The directory in which to output the re-encyphered file contents.')
  .demand('reciphered-output-dir');

var argv = cliargs.argv;

if (argv.help) {
  cliargs.showHelp();
  throw new Error();
}

loader.on('error', function(error) {
  // Ignore errors due to missing files.
});

loader.add(path.join(__dirname, '..', 'defaults.config.yaml'), {filterKeys: true});
loader.addAndNormalizeObject(process.env);

if (argv.config) {
  if (typeof argv.config === 'string') {
    argv.config = [argv.config];
  }
  argv.config.forEach(function(arg) {
    loader.add(path.resolve(arg));
  });
}

loader.addAndNormalizeObject(argv);

loader.load(function(error, config) {
  config = config || {};
  config.encryptionCipher = config.encryptionCipher || 'aes-256-cbc';
  config.encryptionPassword = config.encryptionPassword || 'SECRET';
  config.databasePlugin = 'LevelDB';
  config.fileStorageConfig = config.fileStorageConfig || {};
  config.database = new plugins.database[config.databasePlugin](config.databaseConfig, logger);
  config.fileStorage = new plugins.fileStorage.LocalFiles(config.fileStorageConfig);
  if (config.recipheredOutputDir) {
    config.recipheredOutputDir = config.recipheredOutputDir;
  }
  else {
    throw new Error('Config not specified.');
  }

  // Used to generate IDs for asset uploads.
  var dbStream = config.database.listAssets();

  dbStream.pipe(through2.obj(function(data, enc, cb) {
    config.database.getBucketByAssetId(data.assetId, function(err, bucketId) {
      if (err) {
        console.error(err);
        return;
      }
      runPipes(config, bucketId, data);
    });

    dbStream.on('error', function(err) {
      cb(err);
    });
    cb();
  }));
});

function runPipes(config, bucketId, assetData) {
  var assetId = assetData.assetId;
  var assetMetadata = assetData.metadata;
  var zippedByteCounter = new ByteCounter();
  var rawByteCounter = new ByteCounter();
  var fileStream = config.fileStorage.createReadStream(assetId);
  var recipheredFileWriter = fs.createWriteStream(path.join(config.recipheredOutputDir, assetId), {encoding: 'binary'});

  fileStream
    .on('error', function(err) {
      console.error(`File not found: ${assetId}`);
      fileStream.unpipe();
    })
    .pipe(crypto.createDecipher(config.encryptionCipher, config.encryptionPassword))
    .pipe(zlib.createGunzip())
    .pipe(rawByteCounter)
    .pipe(zlib.createGzip())
    .pipe(zippedByteCounter)
    .pipe(crypto.createCipher(config.encryptionCipher, config.encryptionPassword + assetId + bucketId))
    .pipe(recipheredFileWriter)
    .on('close', function() {
      assetMetadata.rawSize = rawByteCounter.bytes;
      assetMetadata.zippedSize = zippedByteCounter.bytes;
      config.database.updateAsset(bucketId, assetMetadata.fileName, assetId, assetMetadata, function(error) {
        if (error) {
          return console.error(error);
        }
        console.log(`Updated file and metadata: ${assetId} - Raw size: ${rawByteCounter.bytes} - Zipped size: ${zippedByteCounter.bytes}`);
      });
    });
}
